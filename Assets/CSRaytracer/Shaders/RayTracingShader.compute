#pragma kernel CSMain

//-- Uniform variables
RWTexture2D<float4> Result; // GetDimensions, Load, operator[]

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

int _BouncesCount;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4   _PixelOffsetAA; // xz - pixel offset, changing every frame; zw - unised
float3   _AmbientColor;
float    _Seed;

float4 _DirectionalLight;

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

StructuredBuffer<Sphere> _Spheres;

//-- global variables
static const float PI = 3.14159265f;
float2 _Pixel;

float Rand()
{
    float result = frac(sin(_Seed * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}

// cosine-weighted sampling
float3 SampleHemisphereTS(float alpha)
{
    float cosTheta = pow(Rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    float phi = 2 * PI * Rand();
    
    return float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
}

float3x3 GetTangentSpace(float3 normal)
{
    float3 helper = float3(0, 0, 1);
    if( abs(normal.z) > 0.99f)
        helper = float3(1, 0, 0);
   
    float3 tangent  = normalize(cross(helper, normal));
    float3 binormal = normalize(cross(tangent, normal));
    
    return float3x3(tangent, binormal, normal);    
}
//-------------------------------------------------------------------------------------------
struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin    = origin;
    ray.direction = direction;
    ray.energy    = 1.0;

    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 originWS = mul(_CameraToWorld, float4(0.0, 0.0, 0.0, 1.0)).xyz;  // camera pos

    float2 ndc = uv * 2.0 - 1.0;
    float3 directionCS = mul(_CameraInverseProjection, float4(ndc, 0.0, 1.0)).xyz;

    float3 directionWS = mul(_CameraToWorld, float4(directionCS, 0.0)).xyz;
    directionWS = normalize(directionWS);

    return CreateRay(originWS, directionWS);
}
//-------------------------------------------------------------------------------------------
struct RayHit
{
    float3 position;
    float  distance;
    float3 normal;

    //-- hit material parameters
    float3 albedo;
    float3 specular;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = 0.0;
    hit.distance = 1.#INF;
    hit.normal   = 0.0;

    return hit;
};
//-------------------------------------------------------------------------------------------
float3 SampleSkybox(float3 direction)
{
    const float phi = atan2(direction.x, -direction.z) / -PI * 0.5f;
    const float theta = acos(direction.y) / -PI;    

    return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0.0).xyz;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit, float groundH)
{
    float t = -(ray.origin.y - groundH) / ray.direction.y;

    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0, 1.0, 0.0);
        bestHit.albedo = 0.9;
        bestHit.specular = 0.05;
    }
}

// sphere: center + radius
void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere)
{
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float discr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;

    if (discr < 0.0)
        return;

    float p2 = sqrt(discr);

    float t = p1 - p2 > 0.0 ? p1 - p2 : p1 + p2;

    if (t > 0.0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);

        bestHit.albedo   = sphere.albedo;
        bestHit.specular = sphere.specular; // affects on ray energy
    }
}
//-------------------------------------------------------------------------------------------
RayHit TraceScene(Ray ray)
{
    RayHit bestHit = CreateRayHit();    

    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);

    for (uint i = 0; i < numSpheres; i++)
        IntersectSphere(ray, bestHit, _Spheres[i]);
    
    IntersectGroundPlane(ray, bestHit, 0.0);

    return bestHit;
}

float sdot(float3 a, float3 b)
{
    return saturate(dot(a, b));
}

float Energy(float3 color)
{
    return dot(color, 1.0 / 3.0);
}

float SmoothnessToPhongAlpha(float s)
{
    return pow(10.0e4, s * s);
}


float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        // phong shading        
        
        // calc chances of diffuse or specular reflection
        hit.albedo = min(hit.albedo, 1.0 - hit.specular);
        float specChance = Energy(hit.specular);
        float diffChance = Energy(hit.albedo);
        
        float sum = specChance + diffChance;
        specChance /= sum;
        diffChance /= sum;
        
        ray.origin = hit.position + hit.normal * 0.001f;
              
        if (Rand() < specChance)
        {
            //-- specular
            float alpha = SmoothnessToPhongAlpha(1.0f);
            ray.direction = mul(SampleHemisphereTS(alpha), GetTangentSpace(reflect(ray.direction, hit.normal)));
            
            float f = (alpha + 2.0) / (alpha + 1.0);
            ray.energy *= (1.0 / specChance) * hit.specular * sdot(hit.normal, ray.direction);
        }
        else
        {
            //-- diffuse
            ray.direction = mul(SampleHemisphereTS(1.0), GetTangentSpace(hit.normal));
            ray.energy *= (1.0 / diffChance) * hit.albedo;
        }
        
        return 0.0;
    }
    else
    {
        ray.energy = 0.0;
        return SampleSkybox(ray.direction) * _AmbientColor;
    }
}
//-------------------------------------------------------------------------------------------

[numthreads(8,8,1)]
void CSMain (uint3 groupID          : SV_DispatchThreadID, 
             uint3 groupThreadID    : SV_GroupThreadID,
             uint3 dispatchThreadID : SV_DispatchThreadID,
             uint  groupIndex       : SV_GroupIndex)
{
    // dimensions of RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = (float2(groupID.xy) + _PixelOffsetAA.xy) / float2(width, height); // 0..1   
    
    _Pixel = float2(groupID.xy) / float2(width, height);
    //_Pixel = uv; // wrong, but interesting result if _Seed also disabled
    
    Ray ray = CreateCameraRay(uv);

    float3 result = 0.0;
    for (int i = 0; i < _BouncesCount; i++)
    {
        RayHit hit = TraceScene(ray);

        result += ray.energy * Shade(ray, hit);
        
        if (dot(ray.energy, ray.energy) < 0.001)
            break;
    }

    Result[groupID.xy] = float4(result, 1.0);
}
